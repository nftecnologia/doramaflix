# =============================================
# DORAMAFLIX - RAILWAY DEPLOYMENT
# Automated deployment to Railway cloud platform
# =============================================

name: Deploy to Railway

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

jobs:
  # =============================================
  # DEPLOY BACKEND
  # =============================================
  
  deploy-backend:
    name: Deploy Backend to Railway
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy Backend
        working-directory: ./backend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway login --token $RAILWAY_TOKEN
          railway link ${{ secrets.RAILWAY_BACKEND_PROJECT_ID }}
          railway up --service backend

      - name: Run Database Migrations
        working-directory: ./backend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          DATABASE_URL: ${{ secrets.RAILWAY_DATABASE_URL }}
        run: |
          railway run --service backend npm run db:migrate:prod

      - name: Verify Backend Deployment
        run: |
          sleep 30
          curl -f ${{ secrets.RAILWAY_BACKEND_URL }}/health || exit 1

  # =============================================
  # DEPLOY FRONTEND
  # =============================================
  
  deploy-frontend:
    name: Deploy Frontend to Railway
    runs-on: ubuntu-latest
    needs: deploy-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy Frontend
        working-directory: ./frontend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          NEXT_PUBLIC_API_URL: ${{ secrets.RAILWAY_BACKEND_URL }}/api/v1
        run: |
          railway login --token $RAILWAY_TOKEN
          railway link ${{ secrets.RAILWAY_FRONTEND_PROJECT_ID }}
          railway up --service frontend

      - name: Verify Frontend Deployment
        run: |
          sleep 30
          curl -f ${{ secrets.RAILWAY_FRONTEND_URL }}/health || exit 1

  # =============================================
  # POST-DEPLOYMENT TASKS
  # =============================================
  
  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    
    steps:
      - name: Warm up application
        run: |
          # Warm up critical endpoints
          curl -s ${{ secrets.RAILWAY_FRONTEND_URL }} > /dev/null
          curl -s ${{ secrets.RAILWAY_BACKEND_URL }}/api/v1/health > /dev/null
          
      - name: Run health checks
        run: |
          # Backend health check
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.RAILWAY_BACKEND_URL }}/health)
          if [ $response != "200" ]; then
            echo "Backend health check failed with status $response"
            exit 1
          fi
          
          # Frontend health check
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.RAILWAY_FRONTEND_URL }}/health)
          if [ $response != "200" ]; then
            echo "Frontend health check failed with status $response"
            exit 1
          fi

      - name: Update deployment status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create deployment status
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/deployments \
            -d '{
              "ref": "${{ github.sha }}",
              "environment": "production",
              "description": "Deployment to Railway",
              "auto_merge": false
            }'

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            ðŸš€ DoramaFlix deployed to Railway
            Frontend: ${{ secrets.RAILWAY_FRONTEND_URL }}
            Backend: ${{ secrets.RAILWAY_BACKEND_URL }}
            Status: ${{ job.status }}