# =============================================
# DORAMAFLIX - UPSTREAM CONFIGURATION
# Load balancing and upstream server definitions
# =============================================

# Backend API servers
upstream backend_api {
    least_conn;
    server backend:3000 max_fails=3 fail_timeout=30s weight=1;
    # Add more backend instances for scaling:
    # server backend-2:3000 max_fails=3 fail_timeout=30s weight=1;
    # server backend-3:3000 max_fails=3 fail_timeout=30s weight=1;
    
    keepalive 32;
    keepalive_requests 1000;
    keepalive_timeout 60s;
}

# Frontend Next.js servers
upstream frontend_web {
    least_conn;
    server frontend:3000 max_fails=3 fail_timeout=30s weight=1;
    # Add more frontend instances for scaling:
    # server frontend-2:3000 max_fails=3 fail_timeout=30s weight=1;
    # server frontend-3:3000 max_fails=3 fail_timeout=30s weight=1;
    
    keepalive 32;
    keepalive_requests 1000;
    keepalive_timeout 60s;
}

# Database proxy (if using PgBouncer)
upstream database_proxy {
    server postgres:5432 max_fails=2 fail_timeout=30s;
    keepalive 8;
}

# Redis cluster
upstream redis_cluster {
    server redis:6379 max_fails=2 fail_timeout=30s;
    # Add Redis replicas for HA:
    # server redis-replica-1:6379 max_fails=2 fail_timeout=30s backup;
    # server redis-replica-2:6379 max_fails=2 fail_timeout=30s backup;
    
    keepalive 16;
}

# Monitoring services
upstream monitoring {
    server prometheus:9090 max_fails=2 fail_timeout=30s;
}

upstream grafana {
    server grafana:3000 max_fails=2 fail_timeout=30s;
}

# Load balancer health check
upstream health_check {
    server backend:3000 max_fails=1 fail_timeout=10s;
    server frontend:3000 max_fails=1 fail_timeout=10s backup;
}